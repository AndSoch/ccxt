<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class blockbid extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'blockbid',
            'name' => 'Blockbid',
            'countries' => array ( 'AU' ),
            'rateLimit' => 1000,
            'has' => array (
                'CORS' => false,
                'cancelOrders' => true,
                'fetchDepositAddress' => false,
                'fetchL2OrderBook' => false, // this probably needs to be implemented
                'fetchDeposits' => true,
                'fetchMyTrades' => true,
                'fetchOpenOrders' => true,
                'fetchOHLCV' => true,
                'fetchOrder' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'timeframes' => array (
                '1m' => 1,
                '5m' => 5,
                '15m' => 15,
                '30m' => 30,
                '1h' => 60,
                '2h' => 120,
                '4h' => 240,
                '6h' => 360,
                '12h' => 720,
                '1d' => 1440,
                '3d' => 4280,
                '1w' => 10080,
            ),
            'urls' => array (
                'api' => 'https://api.blockbid.io',
                'www' => 'https://platform.blockbid.io',
                'doc' => 'https://docs.blockbid.io',
                'logo' => 'https://platform.blockbid.io/static/logo.svg',
            ),
            'requiredCredentials' => array (
                'apiKey' => true,
                'secret' => true,
                'uid' => false,
                'login' => false,
                'password' => false,
                'twofa' => false,
                'privateKey' => false,
                'walletAddress' => false,
            ),
            'api' => array (
                'public' => array (
                    'get' => array (
                        'markets',
                        'tickers',
                        'ohlc',
                        'orderbook',
                        'trades',
                    ),
                ),
                'private' => array (
                    'get' => array (
                        'identity',
                        'balances',
                        'balances/{currency}',
                        'addresses',
                        'deposits/crypto',
                        'trades/my',
                        'orders',
                        'orders/{id}',
                        'withdraws/fiat',
                        'withdraws/crypto',
                    ),
                    'post' => array (
                        'orders',
                        'withdraws/fiat',
                        'withdraw/crypto',
                    ),
                    'delete' => array (
                        'orders',
                        'orders/{id}',
                    ),
                ),
            ),
            'fees' => array (
                'trading' => array (
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.1,
                    'taker' => 0.1,
                ),
            ),
            'precision' => array (
                'amount' => 8,
                'price' => 8,
            ),
            'supportedFiat' => array (
                'AUD',
                'USD',
                'EUR',
                'JPY',
            ),
            'exceptions' => array (
                'exact' => array (
                    'server_error' => '\\ccxt\\ExchangeNotAvailable',
                    'internal_error' => '\\ccxt\\ExchangeError',
                    'view_order_failed' => '\\ccxt\\OrderNotFound',
                    'order_failed' => '\\ccxt\\InvalidOrder',
                    'rate_limited' => '\\ccxt\\DDoSProtection',
                ),
            ),
        ));
    }

    public function fetch_markets ($params = []) {
        $response = $this->publicGetMarkets ();
        //
        //     array (
        //         array("$id":"btcaud","$name":"BTC/AUD"),
        //         array("$id":"ethaud","$name":"ETH/AUD"),
        //         ...
        //     )
        //
        $result = array();
        for ($i = 0; $i < count ($response); $i++) {
            $market = $response[$i];
            $id = $market['id'];
            $name = $market['name'];
            $pairArray = explode('/', $name);
            $baseId = $pairArray[0];
            $quoteId = $pairArray[1];
            $base = $this->common_currency_code($baseId);
            $quote = $this->common_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array (
                'amount' => 8,
                'price' => null,
            );
            $active = $this->safe_value($market, 'is_active', true);
            $result[] = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => strtolower($baseId),
                'quoteId' => strtolower($quoteId),
                'active' => $active,
                'precision' => $precision,
                'limits' => array (
                    'amount' => array (
                        'min' => $this->safe_float($market, 'base_min_size'),
                        'max' => $this->safe_float($market, 'base_max_size'),
                    ),
                    'price' => array (
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array (
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function parse_ticker ($ticker, $market = null) {
        //
        //     array("$timestamp":"2018-11-08T23:32:28.000Z","$market":"btcaud","$last":8821.15382691)
        //
        $symbol = null;
        if ($market === null) {
            $marketId = $this->safe_string($ticker, 'market');
            if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
                $market = $this->markets_by_id[$marketId];
            } else {
                $pairArray = explode('-', $marketId);
                $baseId = $pairArray[0];
                $quoteId = $pairArray[1];
                $base = $this->common_currency_code($baseId);
                $quote = $this->common_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
            }
        }
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->parse8601 ($this->safe_string($ticker, 'timestamp'));
        $last = $this->safe_float($ticker, 'last');
        return array (
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => null,
            'low' => null,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => null,
            'info' => $ticker,
        );
    }

    public function fetch_ticker ($symbol = null, $params = array ()) {
        $this->load_markets();
        $tickers = $this->fetch_tickers(null, $params);
        $ticker = $this->safe_value($tickers, $symbol);
        if ($ticker === null) {
            throw new ExchangeError($this->id . ' fetchTicker could not fetch $ticker for market $symbol ' . $symbol);
        }
        return $ticker;
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        $response = $this->publicGetTickers ($params);
        //
        //     array (
        //         array("timestamp":"2018-11-08T23:32:28.000Z","market":"btcaud","last":8821.15382691),
        //         array("timestamp":"2018-11-08T23:32:28.000Z","market":"ethaud","last":291.45242072),
        //         ...
        //     )
        //
        $result = array();
        for ($i = 0; $i < count ($response); $i++) {
            $result[] = $this->parse_ticker($response[$i]);
        }
        return $this->index_by($result, 'symbol');
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array (
            'market' => $this->market_id($symbol),
        );
        if ($limit !== null) {
            $request['asks_limit'] = $limit;
            $request['bids_limit'] = $limit;
        }
        $response = $this->publicGetOrderbook (array_merge ($request, $params));
        return $this->parse_order_book($response, null, 'bids', 'asks', 'price', 'volume');
    }

    public function parse_trade ($trade, $market = null) {
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->parse8601 ($this->safe_string($trade, 'createdAt'));
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'volume');
        $cost = null;
        if ($price !== null) {
            if ($amount !== null) {
                $cost = $price * $amount;
            }
        }
        $side = $this->safe_string($trade, 'side');
        $id = $this->safe_string($trade, 'id');
        return array (
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'id' => $id,
            'order' => null,
            'type' => null,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => null,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = 50, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
            'limit' => $limit,
        );
        $response = $this->publicGetTrades (array_merge ($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        return array (
            $this->parse8601 ($this->safe_string($ohlcv, 'timestamp')),
            $this->safe_float($ohlcv, 'open'),
            $this->safe_float($ohlcv, 'high'),
            $this->safe_float($ohlcv, 'low'),
            $this->safe_float($ohlcv, 'close'),
            $this->safe_float($ohlcv, 'volume'),
        );
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
            'period' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['timestamp'] = $since;
        }
        $response = $this->publicGetOhlc (array_merge ($request, $params));
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        $response = $this->privateGetBalances ($params);
        $result = array( 'info' => $response );
        for ($i = 0; $i < count ($response); $i++) {
            $balance = $response[$i];
            $currency = strtoupper($balance['currency']);
            if (is_array($this->currencies_by_id) && array_key_exists($currency, $this->currencies_by_id)) {
                $currency = $this->currencies_by_id[$currency]['code'];
            }
            $account = array (
                'free' => $balance['available'],
                'used' => $balance['locked'],
                'total' => $balance['total'],
            );
            $result[$currency] = $account;
        }
        return $this->parse_balance($result);
    }

    public function parse_order_status ($status) {
        $statuses = array (
            'filled' => 'closed',
            'rejected' => 'closed',
            'partially_filled' => 'open',
            'pending_cancellation' => 'open',
            'pending_modification' => 'open',
            'open' => 'open',
            'new' => 'open',
            'queued' => 'open',
            'cancelled' => 'canceled',
            'triggered' => 'triggered',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order ($order, $market = null) {
        $id = $this->safe_string($order, 'id');
        $symbol = null;
        $marketId = $this->safe_string($order, 'market');
        $market = $this->safe_value($this->markets_by_id, $marketId, $market);
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $price = $this->safe_float($order, 'price');
        $average = $this->safe_float($order, 'averagePrice');
        $amount = $this->safe_float($order, 'volume');
        $filled = $this->safe_float($order, 'executedVolume');
        $remaining = $this->safe_float($order, 'remainingVolume');
        $cost = null;
        if ($average !== null) {
            if ($filled !== null) {
                $cost = $average * $filled;
            } else {
                $cost = $average * $amount;
            }
        }
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $side = $this->safe_string($order, 'side');
        if ($side === 'bid') {
            $side = 'buy';
        } else if ($side === 'ask') {
            $side = 'sell';
        }
        $type = $this->safe_string($order, 'orderType');
        $timestamp = $this->parse8601 ($this->safe_string($order, 'createdAt'));
        $trades = null; // not to be confused with $trades count
        return array (
            'id' => $id,
            'datetime' => $this->iso8601 ($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'cost' => $cost,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'trades' => $trades,
            'remaining' => $remaining,
            'fee' => null,
            'info' => $order,
        );
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $method = 'privatePostOrders';
        $order = array (
            'side' => $side,
            'volume' => $amount,
        );
        if ($type !== null) {
            $order['orderType'] = $type;
        }
        if ($price !== null) {
            $order['price'] = $price;
        }
        $request = array (
            'market' => $market['id'],
            'orders' => array ( $order ),
        );
        $response = $this->$method (array_merge ($request, $params));
        return $this->parse_order($response[0], $market);
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $response = $this->privateDeleteOrdersId (array_merge (array (
            'id' => $id,
        ), $params));
        return $this->parse_order(array_merge ($response, array( 'id' => $id )));
    }

    public function cancel_orders ($side = null, $params = array ()) {
        $this->load_markets();
        $request = array();
        if ($side !== null) {
            $request['side'] = $side;
        }
        $response = $this->privateDeleteOrders (array_merge ($request, $params));
        return $this->parse_orders($response);
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array (
            'id' => $id,
        );
        $response = $this->privateGetOrdersId (array_merge ($request, $params));
        return $this->parse_order($response);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $result = $this->privateGetOrders (array_merge ($request, $params));
        return $this->parse_orders($result, null, $since, $limit);
    }

    public function fetch_deposits ($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        if ($code === null) {
            throw new ExchangeError($this->id . ' fetchDeposits() requires a $currency $code arguemnt');
        }
        $currency = $this->currency ($code);
        $request = array (
            'currency' => $currency['id'],
        );
        $response = $this->privateGetDepositsCrypto (array_merge ($request, $params));
        $deposits = array();
        for ($i = 0; $i < count ($response); $i++) {
            $deposits[] = $response[$i];
        }
        return $this->parseTransactions ($deposits, $currency);
    }

    public function parse_transaction_status ($status) {
        $statuses = array (
            'processing' => 'pending',
            'rejected' => 'failed',
            'accepted' => 'ok',
            'succeed' => 'ok',
        );
        return (is_array($statuses) && array_key_exists($status, $statuses)) ? $statuses[$status] : $status;
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetTradesMy (array_merge ($request, $params));
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_withdrawals ($code = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $currency = $this->currency ($code);
        $request = array (
            'currency' => $currency['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $currencyCode = $currency['code'];
        $isFiat = false;
        for ($i = 0; $i < count ($this->supportedFiat); $i++) {
            if ($currencyCode === $this->supportedFiat[$i]) {
                $isFiat = true;
            }
        }
        $method = $isFiat ? 'privateGetWithdrawsFiat' : 'privateGetWithdrawsCrypto';
        $response = $this->$method (array_merge ($request, $params));
        $withdrawals = array();
        for ($i = 0; $i < count ($response); $i++) {
            $withdrawals[] = $response[$i];
        }
        return $this->parseTransactions ($withdrawals, $currency, $since, $limit);
    }

    public function parse_transaction_statuses ($status) {
        $statuses = array (
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction ($transaction, $currency = null) {
        $id = $this->safe_string($transaction, 'id');
        $txid = $this->safe_string($transaction, 'txid');
        $timestamp = $this->parse8601 ($this->safe_string($transaction, 'createdAt'));
        $code = null;
        $currencyId = $this->safe_string($transaction, 'currency');
        $address = $this->safe_string($transaction, 'address');
        $currency = $this->safe_value($this->currencies_by_id, $currencyId);
        if ($currency !== null) {
            $code = $currency['code'];
        } else {
            $code = $this->common_currency_code($currencyId);
        }
        $amount = $this->safe_float($transaction, 'amount');
        $status = $this->parse_transaction_status ($this->safe_string($transaction, 'state'));
        $updated = $this->safe_string($transaction, 'createdAt');
        $type = $this->safe_string($transaction, 'type');
        $fee = array (
            'cost' => $this->safe_float($transaction, 'fee'),
            'currency' => $code,
            'rate' => null,
        );
        return array (
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'address' => $address,
            'tag' => null, // or is it defined?
            'type' => $type, // direction of the $transaction, ('deposit' | 'withdraw')
            'amount' => $amount,
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'fee' => $fee,
        );
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = null, $headers = null, $body = null) {
        $url = $this->urls['api'] . '/' . $this->implode_params($path, $params);
        $query = null;
        if ($method === 'GET') {
            $query = $this->omit ($params, $this->extract_params($path));
            $query = $this->urlencode ($query);
            if (strlen ($query)) {
                $url .= '?' . $query;
            }
        } else if ($method !== 'DELETE') {
            $body = $params;
        }
        $headers = array( 'Content-Type' => 'application/json' );
        if ($api === 'private') {
            $this->check_required_credentials();
            $nonce = $this->nonce ();
            $nonce = (string) $nonce;
            $encodedApiKey = $this->encode ($this->apiKey);
            $encodedNonce = $this->encode ($nonce);
            $rawSignature = base64_encode ($encodedApiKey) . base64_encode ($encodedNonce);
            $stringifyedPayload = '';
            if ($body) {
                $stringifyedPayload = $this->encode (json_encode ($body));
                $stringifyedPayload = str_replace(' ', '', $stringifyedPayload);
                $body = json_encode ($body);
            }
            $rawSignature = $rawSignature . base64_encode ($stringifyedPayload);
            $encodedSecret = $this->encode ($this->secret);
            $signature = $this->hmac ($rawSignature, $encodedSecret, 'sha384', 'base64');
            $headers['X-Blockbid-Signature'] = $signature;
            $headers['X-Blockbid-Nonce'] = $nonce;
            $headers['X-Blockbid-Api-Key'] = $this->apiKey;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors ($code, $reason, $url, $method, $headers, $body, $response) {
        if (!$this->is_json_encoded_object($body)) {
            return; // fallback to default $error handler
        }
        $realResponse = json_decode($body, $as_associative_array = true);
        $error = $this->safe_value($realResponse, 'error');
        if ($error !== null) {
            $feedback = $this->id . ' ' . $body;
            $code = $this->safe_string($error, 'name');
            $exact = $this->exceptions['exact'];
            if (is_array($exact) && array_key_exists($code, $exact)) {
                throw new $exact[$code]($feedback);
            }
            throw new ExchangeError($feedback); // unknown message
        }
    }

    public function nonce () {
        return $this->milliseconds ();
    }
}
