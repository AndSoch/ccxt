<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception as Exception; // a common import

class blockbid extends Exchange {

    public function describe () {
        return array_replace_recursive (parent::describe (), array (
            'id' => 'blockbid',
            'name' => 'Blockbid',
            'countries' => ['AUS'],
            'rateLimit' => 1000,
            'has' => array (
                'CORS' => false,
                'cancelOrders' => true,
                'fetchDepositAddress' => true,
                'fetchL2OrderBook' => false, // this probably needs to be implemented
                'fetchDeposits' => true,
                'fetchMyTrades' => true,
                'fetchOpenOrders' => true,
                'fetchOHLCV' => true,
                'fetchOrder' => true,
                'fetchTicker' => false,
                'fetchTickers' => true,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'timeframes' => array (
                '1m' => 1,
                '5m' => 5,
                '15m' => 15,
                '30m' => 30,
                '1h' => 60,
                '2h' => 120,
                '4h' => 240,
                '6h' => 360,
                '12h' => 720,
                '1d' => 1440,
                '3d' => 4280,
                '1w' => 10080,
            ),
            'urls' => array (
                'api' => 'http://api.local.blockbid.io',
                'www' => 'https://devblockbid.io',
                'doc' => 'https://doc.devblockbid.io',
            ),
            'api' => array (
                'public' => array (
                    'get' => ['markets', 'tickers', 'ohlc', 'orderbook', 'trades']
                ),
                'private' => array (
                    'get' => array (
                        'identity',
                        'balances',
                        'balances/{currency}',
                        'addresses',
                        'deposits',
                        'deposits/{id}',
                        'trades/my',
                        'orders',
                        'orders/{id}',
                        'withdraws/fiat',
                        'withdraws/crypto',
                    ),
                    'post' => array (
                        'orders',
                        'withdraws/fiat',
                        'withdraw/crypto',
                    ),
                    'delete' => array (
                        'orders',
                        'orders/{id}',
                    ),
                ),
            ),
            'fees' => array (
                'trading' => array (
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => 0.1,
                    'taker' => 0.1,
                ),
            ),
            'precision' => array (
                'amount' => 8,
                'price' => 8,
            ),
            'supportedFiat' => array (
                'AUD',
                'USD',
                'EUR',
                'JPY',
            ),
        ));
    }

    public function fetch_markets () {
        $markets = $this->publicGetMarkets ();
        $err = $this->handle_error ($markets);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err)
        }
        $result = array ();
        for ($i = 0; $i < count ($markets); $i++) {
            $market = $markets[$i];
            $id = $market['id'];
            $name = $market['name'];
            [$baseId, $quoteId] = explode ('/', $name);
            $base = $this->common_currency_code($baseId);
            $quote = $this->common_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $precision = array (
                'amount' => 8,
                'price' => null,
            );
            $active = $this->safe_value($market, 'is_active', true);
            $result[] = array (
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'baseId' => strtolower ($baseId),
                'quoteId' => strtolower ($quoteId),
                'active' => $active,
                'precision' => $precision,
                'limits' => array (
                    'amount' => array (
                        'min' => $this->safe_float($market, 'base_min_size'),
                        'max' => $this->safe_float($market, 'base_max_size'),
                    ),
                    'price' => array (
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array (
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'info' => $market,
            );
        }
        return $result;
    }

    public function parse_ticker ($ticker, $market = null) {
        $symbol = null;
        if ($market === null) {
            $marketId = $this->safe_string($ticker, 'market');
            if (is_array ($this->markets_by_id) && array_key_exists ($marketId, $this->markets_by_id)) {
                $market = $this->markets_by_id[$marketId];
            } else {
                [$baseId, $quoteId] = explode ('-', $marketId);
                $base = $this->common_currency_code($baseId);
                $quote = $this->common_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
            }
        }
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $datetime = $this->safe_string($ticker, 'timestamp');
        $timestamp = $this->parse8601 ($datetime);
        $last = $this->safe_float($ticker, 'last');
        return {
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'high' => $this->safe_float($ticker, '24h_high'),
            'low' => $this->safe_float($ticker, '24h_low'),
            'bid' => $this->safe_float($ticker, 'highest_bid'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'lowest_ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $this->safe_float($ticker, 'percentChanged24hr'),
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_float($ticker, '24h_volume'),
            'quoteVolume' => $this->safe_float($ticker, 'quote_volume'),
            'info' => $ticker }
    }

    public function fetch_ticker ($symbol = null, $params = array ()) {
        $this->load_markets();
        $tickers = $this->publicGetTickers ($params);
        $err = $this->handle_error ($tickers);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        $marketId = $this->market_id($symbol);
        for ($i = 0; $i < count ($tickers); $i++) {
            $ticker = $tickers[$i];
            if ($ticker['market'] === $marketId) {
                return $this->parse_ticker($ticker);
            }
        }
    }

    public function fetch_tickers ($symbols = null, $params = array ()) {
        $this->load_markets();
        $tickers = $this->publicGetTickers ($params);
        $result = array ();
        for ($i = 0; $i < count ($tickers); $i++) {
            $result[] = $this->parse_ticker($tickers[$i]);
        }
        return $this->index_by($result, 'symbol');
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $request = array (
            'market' => $this->market_id($symbol)
        );
        if ($limit !== null) {
            $request['asks_limit'] = $limit;
            $request['bids_limit'] = $limit;
        }
        $response = $this->publicGetOrderbook (array_merge ($request, $params));
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        $preParseBook = array ();
        $arrBids = array ();
        $arrAsks = array ();
        for ($i = 0; $i < count ($response['bids']); $i++) {
            $arrBids[] = [$response['bids'][$i]['price'], $response['bids'][$i]['volume'], array ()];
        }
        for ($i = 0; $i < count ($response['asks']); $i++) {
            $arrAsks[] = [$response['asks'][$i]['price'], $response['asks'][$i]['volume'], array ()];
        }
        $preParseBook['bids'] = $arrBids;
        $preParseBook['asks'] = $arrAsks;
        return $this->parse_order_book($preParseBook, null, 'bids', 'asks', 0, 1);
    }

    public function parse_trade ($trade, $market = null) {
        $symbol = null;
        if ($market) {
            $symbol = $market['symbol'];
        }
        $datetime = $trade['createdAt'];
        $timestamp = $this->parse8601 ($datetime);
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'volume');
        $cost = $price * $amount;
        return array (
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'symbol' => $symbol,
            'id' => $trade['id'],
            'order' => null,
            'type' => null,
            'side' => $trade['side'],
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => null );
    }

    public function fetch_trades ($symbol, $since = null, $limit = 50, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $response = $this->publicGetTrades (
            array_merge (array (
                'market' => $market['id'],
                'limit' => $limit,
            ), $params)
        );
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function parse_ohlcv ($ohlcv, $market = null, $timeframe = '5m', $since = null, $limit = null) {
        $datetime = $this->parse8601 ($ohlcv['timestamp']);
        return [
            $datetime,
            floatval ($ohlcv['open']),
            floatval ($ohlcv['high']),
            floatval ($ohlcv['low']),
            floatval ($ohlcv['close']),
            floatval ($ohlcv['volume']),
        ];
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
            'period' => $this->timeframes[$timeframe],
        );
        if ($since !== null) {
            $request['timestamp'] = $since;
        }
        $response = $this->publicGetOhlc (array_merge ($request, $params));
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function fetch_balance ($params = array ()) {
        $this->load_markets();
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' fetchBalance() requires you to have a valid api key and secret.');
        }
        $response = $this->privateGetBalances ($params);
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        $result = array ( 'info' => $response );
        for ($i = 0; $i < count ($response); $i++) {
            $balance = $response[$i];
            $currency = $balance['currency'];
            if (is_array ($this->currencies_by_id) && array_key_exists ($currency, $this->currencies_by_id)) {
                $currency = $this->currencies_by_id[$currency]['code'];
            }
            $account = array (
                'free' => $balance['available'],
                'used' => $balance['locked'],
                'total' => $balance['total'],
            );
            $result[$currency] = $account;
        }
        return $this->parse_balance($result);
    }

    public function parse_order_status ($status) {
        $statuses = array (
            'filled' => 'closed',
            'rejected' => 'closed',
            'partially_filled' => 'open',
            'pending_cancellation' => 'open',
            'pending_modification' => 'open',
            'open' => 'open',
            'new' => 'open',
            'queued' => 'open',
            'cancelled' => 'canceled',
            'triggered' => 'triggered',
        );
        if (is_array ($statuses) && array_key_exists ($status, $statuses)) {
            return $statuses[$status];
        }
        return $status;
    }

    public function parse_order ($order, $market = null) {
        $symbol = null;
        if ($market === null) {
            $marketId = $this->safe_string($order, 'market');
            $market = $this->safe_value($this->markets_by_id, $marketId);
        }
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $datetime = $this->safe_string($order, 'createdAt');
        $price = $this->safe_float($order, 'price');
        $average = $this->safe_float($order, 'averagePrice');
        $amount = $this->safe_float($order, 'volume');
        $filled = $this->safe_float($order, 'executedVolume');
        $remaining = $this->safe_float($order, 'remainingVolume');
        $cost = null;
        if ($filled !== null && $average !== null) {
            $cost = $average * $filled;
        } else if ($average !== null) {
            $cost = $average * $amount;
        }
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $side = $this->safe_string($order, 'side');
        if ($side === 'bid') {
            $side = 'buy';
        } else if ($side === 'ask') {
            $side = 'sell';
        }
        $timestamp = $this->parse8601 ($datetime);
        return array (
            'id' => $this->safe_string($order, 'id'),
            'datetime' => $datetime,
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $this->safe_string($order, 'orderType'),
            'side' => $side,
            'price' => $price,
            'cost' => $cost,
            'average' => $average,
            'amount' => $amount,
            'filled' => $filled,
            'trades' => $this->safe_string($order, 'tradesCount'),
            'remaining' => $remaining,
            'fee' => null,
            'info' => $order );
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' createOrder() requires you to have a valid api key and secret.');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $method = 'privatePostOrders'
        $order = array (
            'market' => $market['id'],
            'orders' => array (
                array (
                    'side' => $side,
                    'volume' => $amount,
                ),
            ),
        );
        if ($type !== null) {
            $order['orders'][0]['orderType'] = $type;
        }
        if ($price !== null) {
            $order['orders'][0]['price'] = $price;
        }
        $response = $this->$method (array_merge ($order, $params));
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err)
        }
        $order = $this->parse_order($response[0], $market);
        $id = $order['id'];
        $this->orders[$id] = $order;
        return $order;
    }

    public function cancel_order ($id, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' cancelOrder() requires you to have a valid api key and secret.');
        }
        $response = $this->privateDeleteOrdersId (
            array_merge (array (
                'id' => $id,
            ), $params)
        );
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err)
        }
        return $this->parse_order(
            array_merge ($response, array ( 'id' => $id ))
        );
    }

    public function cancel_orders ($side = null, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' cancelOrders() requires you to have a valid api key and secret.');
        }
        $req = array ()
        if ($side !== null) {
            $req['side'] = $side;
        }
        $response = $this->privateDeleteOrders (
            array_merge ($req, $params)
        );
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        return $this->parse_orders($response);
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' fetchOrder() requires you to have a valid api key and secret.');
        }
        $this->load_markets();
        $response = $this->privateGetOrdersId (
            array_merge (array ( 'id' => (string) $id ), $params)
        );
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        return $this->parse_order($response);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' fetchOpenOrders() requires you to have a valid api key and secret.');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $result = $this->privateGetOrders (array_merge ($request, $params));
        $err = $this->handle_error ($result);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        $orders = $this->parse_orders($result, null, $since, $limit);
        return $orders;
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' fetchMyTrades() requires you to have a valid api key and secret.');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array (
            'market' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateGetTradesMy (array_merge ($request, $params));
        $err = $this->handle_error ($response);
        if ($err) {
            throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
        }
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_withdrawals ($code = null, $since = null, $limit = null, $params = array ()) {
        if (!$this->apiKey || !$this->secret) {
            throw new PermissionDenied ($this->id . ' fetchWithdrawals() requires you to have a valid api key and secret.');
        }
        $this->load_markets();
        if ($code === null) {
            throw new ExchangeError ($this->id . ' fetchWithdrawals() requires a $currency $code argument');
        }
        $currency = $this->currency ($code);
        $request = array (
            'currency' => $currency['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $currencyCode = $currency['code'];
        $isFiat = false;
        for ($i = 0; $i < count ($this->supportedFiat); $i++ ) {
            if ($currencyCode === $this->supportedFiat[$i]) {
                $isFiat = true;
            }
        }
        if ($isFiat) {
            $response = $this->privateGetWithdrawsFiat (
                array_merge ($request, $params)
            );
            $err = $this->handle_error ($response);
            if ($err) {
                throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
            }
            return $this->parseTransactions ($response, $currency);
        } else {
            $response = $this->privateGetWithdrawsCrypto (
                array_merge ($request, $params)
            );
            $err = $this->handle_error ($response);
            if ($err) {
                throw new ExchangeError ($this->id . ' has thrown an error => ' . $err);
            }
            return $this->parseTransactions ($response, $currency);
        }
    }

    public function parse_transaction ($transaction, $currency = null) {
        $datetime = $this->safe_string($transaction, 'timeCreated');
        $timestamp = $this->parse8601 ($datetime);
        $code = null;
        if ($currency === null) {
            $currencyId = $this->safe_string($transaction, 'currency');
            if (is_array ($this->currencies_by_id) && array_key_exists ($currencyId, $this->currencies_by_id)) {
                $currency = $this->currencies_by_id[$currencyId];
            }
            $code = $this->common_currency_code($currencyId);
        }
        if ($currency !== null) {
            $code = $currency['code'];
        }
        return array (
            'info' => $transaction,
            'id' => $this->safe_string($transaction, 'withdrawID'),
            'txid' => $this->safe_string($transaction, 'txid'),
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'address' => $this->safe_string($transaction, 'address'), // or is it defined?
            'type' => null, // direction of the $transaction, ('deposit' | 'withdraw')
            'amount' => $this->safe_float($transaction, 'amount'),
            'currency' => $code,
            'status' => $transaction['state'],
            'updated' => $this->safe_string($transaction, 'timeUpdated'),
            'fee' => array (
                'cost' => $this->safe_float($transaction, 'fee'),
                'rate' => null,
            ),
        );
    }

    public function sign ($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'] . '/' . $this->implode_params($path, $params);
        $query = $this->omit ($params, $this->extract_params($path));
        $headers = array ();
        if ($api === 'private') {
            $this->check_required_credentials();
            $nonce = $this->nonce ();
            $nonce = (string) $nonce;
            $encodedApiKey = $this->encode ($this->apiKey);
            $encodedNonce = $this->encode ($nonce);
            $rawSignature = base64_encode ($encodedApiKey) . base64_encode ($encodedNonce);
            $encodedSecret = $this->encode ($this->secret);
            $signature = $this->hmac ($rawSignature, $encodedSecret, 'sha384', 'base64');
            $headers['X-Blockbid-Signature'] = $signature;
            $headers['X-Blockbid-Nonce'] = $nonce;
            $headers['X-Blockbid-Api-Key'] = $this->apiKey;
        }
        if ($method === 'GET') {
            $query = $this->urlencode ($query);
            if (strlen ($query)) {
                $url .= '?' . $query;
            }
        } else {
            $headers['Content-type'] = 'application/json';
            $body = $this->json ($query);
        }
        return array ( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_error ($response) {
        try {
            if ($response['error']) {
                return $response['error']['message'];
            }
            if ($response['message']) {
                return $response['message'];
            }
            return null;
        } catch (Exception $error) {
            return null;
        }
    }

    public function nonce () {
        return $this->milliseconds ();
    }
}
